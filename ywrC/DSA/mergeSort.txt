#include <stdio.h>
#include <stdlib.h>
#include <time.h>

int cap = 10000;

void merge(int a[], int start, int end, int mid)
{
    int p, q, r, newArr[cap];
    p = start;
    q = mid + 1;
    r = start;

    while (p <= mid && q <= end)
    {
        if (a[p] < a[q])
        {
            newArr[r++] = a[p++];
        }
        else
        {
            newArr[r++] = a[q++];
        }
    }

    while (p <= mid)
    {
        newArr[r++] = a[p++];
    }
    while (q <= end)
    {
        newArr[r++] = a[q++];
    }

    for (int i = start; i <= end; i++)
    {
        a[i] = newArr[i];
    }
}

void mergeSort(int i, int j, int a[])
{
    int mid;

    if (i < j)
    {
        mid = (i + j) / 2;
        mergeSort(i, mid, a);
        mergeSort(mid + 1, j, a);
        merge(a, i, j, mid);
    }
}

void printArr(int *a, int n)
{
    for (int i = 0; i < n; i++)
    {
        printf("%d ", a[i]);
    }
    printf("\n");
}

int main()
{
    clock_t t;
    int a[cap];
    int size = sizeof(a) / sizeof(a[0]);

    for (int i = 0; i < size; i++)
    {
        a[i] = (rand() % (cap * 10)) + 1;
    }

    printf("\n---------Unsorted Array---------\n");
    printArr(a, size);
    t = clock();
    mergeSort(0, size - 1, a);
    t = clock() - t;
    double timeTaken = ((double)(t)) / CLOCKS_PER_SEC;
    printf("\n---------Sorted Array---------\n");
    printArr(a, size);

    printf("\n%d element mergesort takes %fs", size, timeTaken);

    return 0;
}
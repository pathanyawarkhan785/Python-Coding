#include <stdio.h>
#define n 3

int min(int a, int b)
{
    return a < b ? a : b;
}

int assembly(int a[2][2], int t[2][2], int *e, int *x)
{
    int T1[n], T2[n], i;

    printf("\ne[0] : %d", e[0]);
    printf("\ne[1] : %d", e[1]);
    printf("\na[0][0] : %d", a[0][0]);
    printf("\na[1][0] : %d", a[1][0]);
    // adding base case times
    T1[0] = e[0] + a[0][0];
    T2[0] = e[1] + a[1][0];

    // Filling the dp tables T1[] and T2[] using recursive relations
    for (i = 1; i < n; i++)
    {
        printf("\nT1[i-1] : %d", T1[i - 1]);
        printf("\na[0][i] : %d", a[0][i]);
        printf("\nt[1][i] : %d", t[1][i]);
        printf("\nT2[i-1] : %d", T2[i - 1]);
        printf("\na[0][i] : %d", a[0][i]);
        T1[i] = min(T1[i - 1] + a[0][i], T2[i - 1] + t[1][i] + a[0][i]);
        printf("\nT1 : %d", T1[i]);
        printf("\n\nT2[i-1] : %d", T2[i - 1]);
        printf("\na[1][i] : %d", a[1][i]);
        printf("\nT1[i-1] : %d", T1[i - 1]);
        printf("\nt[0][i] : %d", t[0][i]);
        printf("\na[1][i] : %d", a[1][i]);
        T2[i] = min(T2[i - 1] + a[1][i], T1[i - 1] + t[0][i] + a[1][i]);
        printf("\nT2 : %d", T2[i]);
    }

    // finding final times and returning the minimum value
    return min(T1[n - 1] + x[0], T2[n - 1] + x[1]);
}

// Driver Code
int main()
{
    //	int a[][n] = {{5, 4, 3}, {2, 3, 7}};
    //	int t[][n] = {{0, 2, 2}, {0, 1, 1}};
    //	int e[2], x[] = {3, 4};

    int a[2][2];
    int t[2][2];
    int e[2], x[2];
    t[0][0] = 0;
    t[1][0] = 0;

    printf("\nEnter the entry time for Station 1 and Station 2 : ");
    scanf("%d %d", &e[0], &e[1]);

    printf("\nEnter the time for Station 1 : a[1][0] , a[1][1] , a[1][2] : ");
    scanf("%d %d %d", &a[0][0], &a[0][1], &a[0][2]);

    printf("\nEnter the time for Station 2 : a[2][0] , a[2][1] , a[2][2] : ");
    scanf("%d %d %d", &a[1][0], &a[1][1], &a[1][2]);

    printf("\nEnter the time: a[1][0] to a[2][1] , a[1][1] to a[2][2]  : ");
    scanf("%d %d", &t[0][1], &t[0][2]);

    printf("\nEnter the time: a[2][0] to a[1][1] , a[2][1] to a[1][2] : ");
    scanf("%d %d", &t[1][1], &t[1][2]);

    printf("\nEnter the exit time for Station 1 and Station 2 : ");
    scanf("%d %d", &x[0], &x[1]);

    printf("\nThe minimum time taken is: %d ", assembly(a, t, e, x));

    return 0;
}


Output :-

Enter the entry time for Station 1 and Station 2 : 5 7


Enter the time for Station 1 : a[1][0] , a[1][1] , a[1][2] : 2 3 4 

Enter the time for Station 2 : a[2][0] , a[2][1] , a[2][2] : 3 2 2

Enter the time: a[1][0] to a[2][1] , a[1][1] to a[2][2]  : 2 2 1 

Enter the time: a[2][0] to a[1][1] , a[2][1] to a[1][2] : 4

Enter the exit time for Station 1 and Station 2 : 1 1

e[0] : 5
e[1] : 7
a[0][0] : 4
a[1][0] : 3
T1[i-1] : 9
a[0][i] : 3
t[1][i] : 1
T2[i-1] : 10
a[0][i] : 3
T1 : 12

T2[i-1] : 10
a[1][i] : 2
T1[i-1] : 9
t[0][i] : 2
a[1][i] : 2
T2 : 12
T1[i-1] : 12
a[0][i] : 3
t[1][i] : 4
T2[i-1] : 12
a[0][i] : 3
T1 : 15

T2[i-1] : 12
a[1][i] : 2
T1[i-1] : 12
t[0][i] : 2
a[1][i] : 2
T2 : 14
The minimum time taken is: 15
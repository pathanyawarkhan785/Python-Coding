#include <stdio.h>
#include <stdlib.h>
#include <math.h>

void mergesort(int i, int j, int temp[])
{
    int mid;

    if (i < j)
    {
        mid = (i + j) / 2;
        mergesort(i, mid, temp);
        mergesort(mid + 1, j, temp);
        merge(temp, i, j, mid);
    }
}

void merge(int temp[], int beg, int end, int mid)
{
    int p, q, r, new_arr[100];
    p = beg;
    q = mid + 1;
    r = beg;

    while (p <= mid && q <= end)
    {
        if (temp[p] < temp[q])
        {
            new_arr[r++] = temp[p++];
        }
        else
        {
            new_arr[r++] = temp[q++];
        }
    }

    while (p <= mid)
    {
        new_arr[r++] = temp[p++];
    }
    while (q <= end)
    {
        new_arr[r++] = temp[q++];
    }

    for (int i = beg; i <= end; i++)
    {
        temp[i] = new_arr[i];
    }
}

int main()
{
    FILE *files[50];
    FILE *fileread;
    int *fp[11];
    int fna[10];

    srand(time(NULL));
    int a[100];
    for (int j = 0; j < 100; j++)
    {
        a[j] = rand() % 100;
    }

    for (int m = 0; m < 10; m++)
    {

        char filename[20];
        sprintf(filename, "results%d.txt", m);
        files[m] = fopen(filename, "w");
        fclose(files[m]);
        int j = 0;
        int temp[100];
        int index = 0;
        int k = m * 10 + 10;
        for (int j = m * 10; j < k; j++)
        {
            temp[index++] = a[j];
        }

        mergesort(0, 9, temp);

        for (int i = 0; i < 10; i++)
        {
            printf("%d,", temp[i]);
        }
        printf("\n");

        sprintf(filename, "results%d.txt", m);
        files[m] = fopen(filename, "w+");

        for (int j = 0; j < 10; j++)
        {
            fprintf(files[m], "%d,", temp[j]);
        }

        fclose(files[m]);
    }

    FILE *fileappend;

    fileappend = fopen("sorted.txt", "w");
    fclose(fileappend);

    for (int t = 0; t < 100; t++)
    {
        printf("\n      LOOP:%d", t);
        int minvalue = INFINITY;
        int minindex = 0;
        int index = -1;
        for (int n = 0; n < 10; n++)
        {
            index++;
            char filename[20];
            FILE *fp;
            sprintf(filename, "results%d.txt", n);
            fp = fopen(filename, "r");

            if (fp == NULL)
            {
                return 0;
            }

            char c = fgetc(fp);
            if (c == EOF)
            {

                continue;
            }

            int temp = 0;
            while (c != ',')
            {
                int num = 0;
                num = (int)c - 48;
                temp = temp * 10 + num;
                c = fgetc(fp);
            }
            if (temp < minvalue)
            {
                minvalue = temp;
                minindex = index;
            }
            fclose(fp);
        }

        printf("\nVALUE : %d and index %d", minvalue, minindex);

        FILE *fileappend;

        fileappend = fopen("sorted.txt", "a");

        fprintf(fileappend, "%d:-%d\n,", t, minvalue);

        fclose(fileappend);

        char str1[] = ",";
        char str2[20];

        itoa(minvalue, str2, 10);
        strcat(str2, str1);

        int len = strlen(str2);

        char fileN[20];
        char str[50];
        int lens;
        FILE *fr;
        sprintf(fileN, "results%d.txt", minindex);
        fr = fopen(fileN, "r");

        if (fr == NULL)
        {
            printf("BYE");
            return 0;
        }

        while (fgets(str, 50, fr) != NULL)
        {
            lens = strlen(str);
        }

        fclose(fr);

        char fileN1[20];
        FILE *fr1;
        sprintf(fileN1, "results%d.txt", minindex);
        fr1 = fopen(fileN1, "w+");
        for (int j = len; j < lens; j++)
        {
            fprintf(fr1, "%c", str[j]);
        }
        fclose(fr1);
    }

    printf("\nMERGE SORT DONE SUCCESSFULLY !!! \n");
}


Output :-

22,28,33,40,47,49,50,71,81,87,
16,29,32,33,40,60,64,66,69,74,
22,30,31,34,49,69,79,88,92,94,
2,4,30,44,47,50,60,61,67,84,
8,9,16,46,54,56,74,78,80,86,
5,8,15,21,64,73,73,83,93,94,
0,33,48,79,84,87,88,95,96,97,
24,39,39,45,58,75,76,77,84,85,
14,15,25,27,31,36,44,49,75,83,
6,21,26,36,44,57,63,63,80,89,

      LOOP:0
VALUE : 0 and index 6
      LOOP:1
VALUE : 2 and index 3
      LOOP:2
VALUE : 4 and index 3
      LOOP:3
VALUE : 5 and index 5
      LOOP:4
VALUE : 6 and index 9
      LOOP:5
VALUE : 8 and index 4
      LOOP:6
VALUE : 8 and index 5
      LOOP:7
VALUE : 9 and index 4
      LOOP:8
VALUE : 14 and index 8
      LOOP:9
VALUE : 15 and index 5
      LOOP:10
VALUE : 15 and index 8
      LOOP:11
VALUE : 16 and index 1
      LOOP:12
VALUE : 16 and index 4
      LOOP:13
VALUE : 21 and index 5
      LOOP:14
VALUE : 21 and index 9
      LOOP:15
VALUE : 22 and index 0
      LOOP:16
VALUE : 22 and index 2
      LOOP:17
VALUE : 24 and index 7
      LOOP:18
VALUE : 25 and index 8
      LOOP:19
VALUE : 26 and index 9
      LOOP:20
VALUE : 27 and index 8
      LOOP:21
VALUE : 28 and index 0
      LOOP:22
VALUE : 29 and index 1
      LOOP:23
VALUE : 30 and index 2
      LOOP:24
VALUE : 30 and index 3
      LOOP:25
VALUE : 31 and index 2
      LOOP:26
VALUE : 31 and index 8
      LOOP:27
VALUE : 32 and index 1
      LOOP:28
VALUE : 33 and index 0
      LOOP:29
VALUE : 33 and index 1
      LOOP:30
VALUE : 33 and index 6
      LOOP:31
VALUE : 34 and index 2
      LOOP:32
VALUE : 36 and index 8
      LOOP:33
VALUE : 36 and index 9
      LOOP:34
VALUE : 39 and index 7
      LOOP:35
VALUE : 39 and index 7
      LOOP:36
VALUE : 40 and index 0
      LOOP:37
VALUE : 40 and index 1
      LOOP:38
VALUE : 44 and index 3
      LOOP:39
VALUE : 44 and index 8
      LOOP:40
VALUE : 44 and index 9
      LOOP:41
VALUE : 45 and index 7
      LOOP:42
VALUE : 46 and index 4
      LOOP:43
VALUE : 47 and index 0
      LOOP:44
VALUE : 47 and index 3
      LOOP:45
VALUE : 48 and index 6
      LOOP:46
VALUE : 49 and index 0
      LOOP:47
VALUE : 49 and index 2
      LOOP:48
VALUE : 49 and index 8
      LOOP:49
VALUE : 50 and index 0
      LOOP:50
VALUE : 50 and index 3
      LOOP:51
VALUE : 54 and index 4
      LOOP:52
VALUE : 56 and index 4
      LOOP:53
VALUE : 57 and index 9
      LOOP:54
VALUE : 58 and index 7
      LOOP:55
VALUE : 60 and index 1
      LOOP:56
VALUE : 60 and index 3
      LOOP:57
VALUE : 61 and index 3
      LOOP:58
VALUE : 63 and index 9
      LOOP:59
VALUE : 63 and index 9
      LOOP:60
VALUE : 64 and index 1
      LOOP:61
VALUE : 64 and index 5
      LOOP:62
VALUE : 66 and index 1
      LOOP:63
VALUE : 67 and index 3
      LOOP:64
VALUE : 69 and index 1
      LOOP:65
VALUE : 69 and index 2
      LOOP:66
VALUE : 71 and index 0
      LOOP:67
VALUE : 73 and index 5
      LOOP:68
VALUE : 73 and index 5
      LOOP:69
VALUE : 74 and index 1
      LOOP:70
VALUE : 74 and index 4
      LOOP:71
VALUE : 75 and index 7
      LOOP:72
VALUE : 75 and index 8
      LOOP:73
VALUE : 76 and index 7
      LOOP:74
VALUE : 77 and index 7
      LOOP:75
VALUE : 78 and index 4
      LOOP:76
VALUE : 79 and index 2
      LOOP:77
VALUE : 79 and index 6
      LOOP:78
VALUE : 80 and index 4
      LOOP:79
VALUE : 80 and index 9
      LOOP:80
VALUE : 81 and index 0
      LOOP:81
VALUE : 83 and index 5
      LOOP:82
VALUE : 83 and index 8
      LOOP:83
VALUE : 84 and index 3
      LOOP:84
VALUE : 84 and index 6
      LOOP:85
VALUE : 84 and index 7
      LOOP:86
VALUE : 85 and index 7
      LOOP:87
VALUE : 86 and index 4
      LOOP:88
VALUE : 87 and index 0
      LOOP:89
VALUE : 87 and index 6
      LOOP:90
VALUE : 88 and index 2
      LOOP:91
VALUE : 88 and index 6
      LOOP:92
VALUE : 89 and index 9
      LOOP:93
VALUE : 92 and index 2
      LOOP:94
VALUE : 93 and index 5
      LOOP:95
VALUE : 94 and index 2
      LOOP:96
VALUE : 94 and index 5
      LOOP:97
VALUE : 95 and index 6
      LOOP:98
VALUE : 96 and index 6
      LOOP:99
VALUE : 97 and index 6
MERGE SORT DONE SUCCESSFULLY !!!
